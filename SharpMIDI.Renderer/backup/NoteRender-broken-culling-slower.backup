using Raylib_cs;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Numerics;
using SharpMIDI;

namespace SharpMIDI.Renderer
{
    public static unsafe class NoteRenderer
    {
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        private struct MergeNote
        {
            public float x1, x2;
            public uint color;
            public byte height;
            public byte noteLayer;
            public bool glowing;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        private struct PackedRect
        {
            public Raylib_cs.Rectangle rect;
            public Raylib_cs.Color color;
        }

        private const int RECT_CAPACITY = 16777216;
        private static PackedRect[] packedRects = new PackedRect[RECT_CAPACITY];

        private static readonly MergeNote[] mergeNotePool = new MergeNote[128];
        private static readonly bool[] validPool = new bool[128];

        private static float cachedYScale = 0f;
        private static float cachedWindow = 0f;
        private static float cachedScreenWidth = 0f;
        private static float cachedScreenHeight = 0f;
        private static int cachedPadding = 0;

        private static readonly Dictionary<uint, uint> glowColorCache = new(256);

        public static int LastFrameRectCount { get; private set; } = 0;
        public static bool EnableGlow { get; set; } = true;
        public static float Window { get; set; } = 2000f;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Initialize(int screenHeight, int padding)
        {
            cachedScreenHeight = screenHeight;
            cachedPadding = padding;
            cachedYScale = (screenHeight - padding * 2) / 128f;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static int FindStartIndex(float visibleStart, float windowBuffer)
        {
            if (NoteProcessor.allNotes.Length == 0) return 0;

            int lo = 0, hi = NoteProcessor.allNotes.Length - 1, result = 0;

            while (lo <= hi)
            {
                int m = lo + ((hi - lo) >> 1);
                ref var note = ref NoteProcessor.allNotes[m];

                if (note.endTime >= visibleStart - windowBuffer)
                {
                    result = m;
                    hi = m - 1;
                }
                else
                {
                    lo = m + 1;
                }
            }

            while (result > 0)
            {
                ref var prevNote = ref NoteProcessor.allNotes[result - 1];
                if (prevNote.endTime < visibleStart) break;
                result--;
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static int BuildVisibleRectangles(float tick, int screenWidth, int screenHeight, int padding)
        {
            bool dimensionsChanged = cachedScreenWidth != screenWidth ||
                                     cachedScreenHeight != screenHeight ||
                                     cachedPadding != padding;
        
            if (dimensionsChanged)
            {
                cachedScreenWidth = screenWidth;
                cachedScreenHeight = screenHeight;
                cachedPadding = padding;
                cachedYScale = (screenHeight - (padding << 1)) * (1f / 128f);
            }
        
            lock (NoteProcessor.ReadyLock)
            {
                if (!NoteProcessor.IsReady || NoteProcessor.AllNotes.Length == 0) return 0;
            }
        
            float windowHalf = Window * 0.5f;
            float start = tick - windowHalf;
            float end = tick + windowHalf;
            float scale = screenWidth / Window;
        
            if (MathF.Abs(cachedWindow - Window) > 1f)
            {
                cachedWindow = Window;
            }
        
            float windowBuffer = Window * 0.05f;
            int startIdx = FindStartIndex(start, windowBuffer);
        
            unsafe
            {
                fixed (MergeNote* poolPtr = mergeNotePool)
                {
                    Unsafe.InitBlockUnaligned(poolPtr, 0, (uint)(sizeof(MergeNote) << 7));
                }
                fixed (bool* validPtr = validPool)
                {
                    Array.Clear(validPool, 0, 128);
                }
            }
        
            int count = 0;
            float yBase = screenHeight - padding;
            float screenWidthF = screenWidth;
        
            var allNotes = NoteProcessor.AllNotes.AsSpan();
            int noteCount = allNotes.Length;
        
            bool enableGlow = EnableGlow;
            float startMinusBuffer = start - windowBuffer;
            int capacityMinus128 = RECT_CAPACITY - 128;
            float offset = -start * scale;
        
            for (int i = startIdx; i < noteCount && count < capacityMinus128; i++)
            {
                ref var n = ref allNotes[i];
                if (n.startTime > end) break;
                if (n.endTime < startMinusBuffer) continue;
            
                float x1 = n.startTime * scale + offset;
                float x2 = n.endTime * scale + offset;
                if (x2 <= 0f || x1 >= screenWidthF) continue;
            
                int ny = n.noteNumber;
                byte noteLayer = n.noteLayer;
                bool isGlowing = enableGlow & (tick >= n.startTime) & (tick <= n.endTime);
            
                ref bool valid = ref validPool[ny];
                if (valid)
                {
                    ref var existing = ref mergeNotePool[ny];
            
                    if (x1 - existing.x2 <= 1f && isGlowing == existing.glowing)
                    {
                        if (noteLayer == existing.noteLayer)
                        {
                            if (x2 > existing.x2) existing.x2 = x2;
                            continue;
                        }
                        if (noteLayer <= existing.noteLayer) continue;
            
                        EmitRectOptimized(in existing, ny, yBase, count++);
                    }
                    else
                    {
                        EmitRectOptimized(in existing, ny, yBase, count++);
                    }
                }
            
                ref var newMerge = ref mergeNotePool[ny];
                newMerge.x1 = x1;
                newMerge.x2 = x2;
                newMerge.height = n.height;
                newMerge.noteLayer = noteLayer;
                newMerge.glowing = isGlowing;
                newMerge.color = isGlowing ? CalculateGlowColorFast(n.color) : n.color;
                valid = true;
            }
        
            for (int ny = 0; ny < 128 && count < RECT_CAPACITY; ny++)
            {
                if (validPool[ny])
                {
                    EmitRectOptimized(in mergeNotePool[ny], ny, yBase, count++);
                }
            }
        
            LastFrameRectCount = count;
            return count;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static uint CalculateGlowColorFast(uint baseColor)
        {
            uint r = Math.Min(255u, (baseColor >> 16) & 0xFF) << 2;
            uint g = Math.Min(255u, (baseColor >> 8) & 0xFF) << 2;
            uint b = Math.Min(255u, baseColor & 0xFF) << 2;

            r = (r > 255u) ? 255u : r;
            g = (g > 255u) ? 255u : g;
            b = (b > 255u) ? 255u : b;

            return 0xFF000000u | (r << 16) | (g << 8) | b;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static void EmitRectOptimized(in MergeNote r, int ny, float yBase, int index)
        {
            float noteY = yBase - (ny + 0.5f) * cachedYScale;
            float rectY = noteY - r.height * 0.5f;
            float width = r.x2 - r.x1;

            packedRects[index].rect = new Raylib_cs.Rectangle(r.x1, rectY, width, r.height);
            uint c = r.color;
            packedRects[index].color = new Raylib_cs.Color(
                (byte)(c >> 16),
                (byte)(c >> 8),
                (byte)c,
                (byte)255
            );
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static void EmitRectBatch(PackedRect* batch, int length)
        {
            for (int i = 0; i < length; i++)
            {
                Raylib.DrawRectangleRec(batch[i].rect, batch[i].color);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static void DrawRectangles(int count)
        {
            if (count == 0) return;

            const int BATCH_SIZE = 64;
            int fullBatches = count / BATCH_SIZE;
            int remainder = count % BATCH_SIZE;

            fixed (PackedRect* rectPtr = packedRects)
            {
                for (int b = 0; b < fullBatches; b++)
                {
                    EmitRectBatch(rectPtr + b * BATCH_SIZE, BATCH_SIZE);
                }

                if (remainder > 0)
                {
                    EmitRectBatch(rectPtr + fullBatches * BATCH_SIZE, remainder);
                }
            }
        }

        // Apply visibility rules based on noteLayer (formerly layerPriority)
        private static bool ShouldReplaceExisting(MergeNote existing, byte newLayer)
        {
            // Only replace existing note if the new one has a higher layer (visually on top)
            return newLayer > existing.noteLayer; //will it not be as broken if its the opposite (it infact did not)
            //return newLayer < existing.noteLayer;
        }
        
        public static void Shutdown()
        {
            packedRects = null;
            glowColorCache.Clear();
        }
    }
}
